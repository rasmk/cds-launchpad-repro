/* global module */
module.exports = {
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 2020,
    sourceType: 'module',
    project: true,
  },
  plugins: ['@typescript-eslint'],
  extends: ['eslint:recommended', 'plugin:@typescript-eslint/recommended'],
  rules: {
    // eslint possible errors
    'accessor-pairs': 'warn',
    'grouped-accessor-pairs': 'warn',
    'no-await-in-loop': 'warn',
    'no-console': ['warn', {allow: ['warn', 'error']}],
    'no-constructor-return': 'warn',
    'no-loss-of-precision': 'error',
    'no-template-curly-in-string': 'warn',
    'no-unreachable': 'warn',
    'require-atomic-updates': 'warn',
    // eslint best practices
    'array-callback-return': 'warn',
    'comma-dangle': 'off',
    complexity: 'warn',
    'consistent-return': 'warn',
    'default-case-last': 'error',
    'guard-for-in': 'warn',
    indent: ['warn', 2, {SwitchCase: 1}],
    'no-alert': 'warn',
    'no-caller': 'error',
    'no-div-regex': 'error',
    'no-empty-function': ['warn', {allow: ['constructors']}], // we use empty constructors in actions
    'no-eval': 'error',
    'no-extend-native': 'error',
    'no-extra-bind': 'error',
    'no-implicit-coercion': 'warn',
    'no-implicit-globals': 'error',
    'no-implied-eval': 'error',
    'no-invalid-this': 'warn',
    'no-iterator': 'error',
    'no-labels': 'warn',
    'no-lone-blocks': 'warn',
    'no-loop-func': 'warn',
    'no-multi-spaces': 'warn',
    'no-multi-str': 'error',
    'no-new-func': 'error',
    'no-new-wrappers': 'error',
    'no-octal': 'error',
    'no-octal-escape': 'error',
    'no-param-reassign': 'error',
    'no-proto': 'error',
    'no-redeclare': 'off',
    'no-return-assign': 'error',
    'no-script-url': 'error',
    'no-self-assign': 'error',
    'no-self-compare': 'error',
    'no-sequences': 'error',
    'no-throw-literal': 'error',
    'no-unmodified-loop-condition': 'warn',
    'no-unused-expressions': 'warn',
    'no-useless-call': 'error',
    'no-useless-concat': 'warn',
    'no-void': 'error',
    'prefer-regex-literals': 'warn',
    quotes: ['warn', 'single', {avoidEscape: true, allowTemplateLiterals: true}],
    radix: 'warn',
    'require-await': 'warn',
    'wrap-iife': ['error', 'inside'],
    // eslint variables
    'no-restricted-globals': [
      'error',
      {
        name: 'event',
        message: 'Use local parameter instead.',
      },
    ],
    'no-shadow': 'off',
    'no-undef-init': 'error',
    // eslint ES6
    'no-useless-rename': 'warn',
    'no-var': 'error',
    'prefer-const': 'warn',
    'prefer-rest-params': 'warn',
    'prefer-spread': 'warn',
    'prefer-template': 'warn',
    'rest-spread-spacing': ['error', 'never'],
    // typescript
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-empty-function': 'warn',
    '@typescript-eslint/no-shadow': 'warn',
    '@typescript-eslint/no-unused-vars': 'warn',
    '@typescript-eslint/no-redeclare': ['error'],
    '@typescript-eslint/no-unsafe-argument': 'off',
    '@typescript-eslint/no-unsafe-assignment': 'off',
    '@typescript-eslint/no-unsafe-call': 'off',
    '@typescript-eslint/no-unsafe-member-access': 'off',
    '@typescript-eslint/no-unsafe-return': 'off',
  },
};
